{
  "root": {
    "name": "",
    "flags": 0,
    "uiPositionX": 0,
    "uiPositionY": 0,
    "plugs": {

    },
    "nodes": [
      {
        "name": "_settings",
        "flags": 1,
        "uiPositionX": 0,
        "uiPositionY": 0,
        "plugs": {
          "projectDirectory": {
            "name": "projectDirectory",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": ""
          },
          "worldScale_": {
            "name": "worldScale_",
            "valueType": "float",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": 1.000000
          },
          "useCustomResolution": {
            "name": "useCustomResolution",
            "valueType": "bool",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": false
          },
          "imageWidth": {
            "name": "imageWidth",
            "valueType": "int",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": 1920
          },
          "imageHeight": {
            "name": "imageHeight",
            "valueType": "int",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": 1080
          },
          "startFrame": {
            "name": "startFrame",
            "valueType": "int",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": 0
          },
          "endFrame": {
            "name": "endFrame",
            "valueType": "int",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": 0
          },
          "byFrame": {
            "name": "byFrame",
            "valueType": "int",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": 0
          },
          "numOfPadding": {
            "name": "numOfPadding",
            "valueType": "int",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": 0
          },
          "renumberFrames": {
            "name": "renumberFrames",
            "valueType": "bool",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": false
          },
          "newFrameNumber": {
            "name": "newFrameNumber",
            "valueType": "int",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": 0
          }
        },
        "nodes": [

        ],
        "connections": [

        ]
      },
      {
        "name": "ColorTarget",
        "flags": 0,
        "uiPositionX": -160,
        "uiPositionY": -310,
        "opTypeName": "io.artineering.flair.Read",
        "plugs": {
          "imageFilePath": {
            "name": "imageFilePath",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "C:/Users/siim95/Desktop/Flair alpha/aovs/Spherebot_Flair/Spherebot_720.shotcam.colorTarget.0063.exr"
          },
          "requestedFormat": {
            "name": "requestedFormat",
            "valueType": "int",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": 0
          },
          "C": {
            "name": "C",
            "valueType": "Image",
            "flags": 2,
            "direction": 1,
            "evaluationMode": 1,
            "expression": "",
            "uiOrder": 0
          }
        },
        "nodes": [

        ],
        "connections": [

        ]
      },
      {
        "name": "_globals",
        "flags": 1,
        "uiPositionX": 0,
        "uiPositionY": 0,
        "plugs": {

        },
        "nodes": [

        ],
        "connections": [

        ]
      },
      {
        "name": "bufferB",
        "flags": 0,
        "uiPositionX": -470,
        "uiPositionY": -85,
        "opTypeName": "io.artineering.flair.ShaderOp",
        "plugs": {
          "Source Code": {
            "name": "Source Code",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "/* interface\noutputs = [\"fragColor\"]\n\n[[textures]]\nname = \"Target\"\n*/\n\nuniform sampler2D Target;\n\nout vec4 fragColor;\n\nvec2 complexMultiply(in vec2 a, in vec2 b)\n{\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + b.x * a.y);\n}\n\nvoid main()\n{\n\tvec2 uv = gl_FragCoord.xy / u_resolution;\n    vec2 pixelUVSize = vec2(1.0, 1.0) / u_resolution;\n    vec2 stepi = vec2(texture(Target, pixelUVSize * 0.5).r, 0.0);\n    \n    vec4 complexR = vec4(0.0);\n    \n    for(int i = -10; i <= 10; ++i)\n    {\n        vec4 samp = texture(Target, uv + float(i) * stepi);\n        vec4 kernel = texture(Target, pixelUVSize * 0.5 + pixelUVSize * vec2(i+50, 0.0));\n        complexR.xy += complexMultiply(vec2(samp.r * samp.a, 0.0), kernel.xy);\n        complexR.zw += complexMultiply(vec2(samp.r * samp.a, 0.0), kernel.zw);\n    }\n    \n\tfragColor = complexR;\n    //fragColor = vec4();\n}\n"
          },
          "Source File Name": {
            "name": "Source File Name",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "C:/Users/siim95/Desktop/Flair alpha/DepthOfFieldSiim/DepthofFieldShaders/CircularSeparableConvDoF/bufferB.glsl"
          },
          "Interface Description": {
            "name": "Interface Description",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "\noutputs = [\"fragColor\"]\n\n[[textures]]\nname = \"Target\"\n"
          },
          "i:Target": {
            "name": "i:Target",
            "valueType": "Image",
            "flags": 2,
            "direction": 0,
            "evaluationMode": 2,
            "expression": "",
            "uiOrder": 0
          },
          "fragColor": {
            "name": "fragColor",
            "valueType": "Image",
            "flags": 2,
            "direction": 1,
            "evaluationMode": 1,
            "expression": "",
            "uiOrder": 0
          }
        },
        "nodes": [

        ],
        "connections": [

        ]
      },
      {
        "name": "bufferC",
        "flags": 0,
        "uiPositionX": -355,
        "uiPositionY": 0,
        "opTypeName": "io.artineering.flair.ShaderOp",
        "plugs": {
          "Source Code": {
            "name": "Source Code",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "/* interface\noutputs = [\"fragColor\"]\n\n[[textures]]\nname = \"Target\"\n*/\n\nuniform sampler2D Target;\n\nout vec4 fragColor;\n\n// Circular DOF: Kleber \"Kecho\" Garcia (c) 2017\n\nvec2 complexMultiply(in vec2 a, in vec2 b)\n{\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + b.x * a.y);\n}\n\nvoid main()\n{\n\tvec2 uv = gl_FragCoord.xy / u_resolution;\n    vec2 pixelUVSize = vec2(1.0, 1.0) / u_resolution;\n    vec2 stepi = vec2(texture(Target, pixelUVSize * 0.5).r, 0.0);\n    \n    vec4 complexG = vec4(0.0);\n    \n    for(int i = -10; i <= 10; ++i)\n    {\n        vec4 samp = texture(Target, uv + float(i) * stepi);\n        vec4 kernel = texture(Target, pixelUVSize * 0.5 + pixelUVSize * vec2(i+50, 0.0));\n        complexG.xy += complexMultiply(vec2(samp.g * samp.a, 0.0), kernel.xy);\n        complexG.zw += complexMultiply(vec2(samp.g * samp.a, 0.0), kernel.zw);\n    }\n    \n\tfragColor = complexG;\n    //fragColor = vec4();\n}\n"
          },
          "Source File Name": {
            "name": "Source File Name",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "C:/Users/siim95/Desktop/Flair alpha/DepthOfFieldSiim/DepthofFieldShaders/CircularSeparableConvDoF/bufferC.glsl"
          },
          "Interface Description": {
            "name": "Interface Description",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "\noutputs = [\"fragColor\"]\n\n[[textures]]\nname = \"Target\"\n"
          },
          "i:Target": {
            "name": "i:Target",
            "valueType": "Image",
            "flags": 2,
            "direction": 0,
            "evaluationMode": 2,
            "expression": "",
            "uiOrder": 0
          },
          "fragColor": {
            "name": "fragColor",
            "valueType": "Image",
            "flags": 2,
            "direction": 1,
            "evaluationMode": 1,
            "expression": "",
            "uiOrder": 0
          }
        },
        "nodes": [

        ],
        "connections": [

        ]
      },
      {
        "name": "bufferD",
        "flags": 0,
        "uiPositionX": -225,
        "uiPositionY": -100,
        "opTypeName": "io.artineering.flair.ShaderOp",
        "plugs": {
          "Source Code": {
            "name": "Source Code",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "/* interface\noutputs = [\"fragColor\"]\n\n[[textures]]\nname = \"Target\"\n*/\n\nuniform sampler2D Target;\n\nout vec4 fragColor;\n\nvec2 complexMultiply(in vec2 a, in vec2 b)\n{\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + b.x * a.y);\n}\n\nvoid main()\n{\n\tvec2 uv = gl_FragCoord.xy / u_resolution;\n    vec2 pixelUVSize = vec2(1.0, 1.0) / u_resolution;\n    vec2 stepi = vec2(texture(Target, pixelUVSize * 0.5).r, 0.0);\n    \n    vec4 complexB = vec4(0.0);\n    \n    for(int i = -10; i <= 10; ++i)\n    {\n        vec4 samp = texture(Target, uv + float(i) * stepi);\n        vec4 kernel = texture(Target, pixelUVSize * 0.5 + pixelUVSize * vec2(i+50, 0.0));\n        complexB.xy += complexMultiply(vec2(samp.b * samp.a, 0.0), kernel.xy);\n        complexB.zw += complexMultiply(vec2(samp.b * samp.a, 0.0), kernel.zw);\n    }\n    \n\tfragColor = complexB;\n    //fragColor = vec4();\n}\n"
          },
          "Source File Name": {
            "name": "Source File Name",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "C:/Users/siim95/Desktop/Flair alpha/DepthOfFieldSiim/DepthofFieldShaders/CircularSeparableConvDoF/bufferD.glsl"
          },
          "Interface Description": {
            "name": "Interface Description",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "\noutputs = [\"fragColor\"]\n\n[[textures]]\nname = \"Target\"\n"
          },
          "i:Target": {
            "name": "i:Target",
            "valueType": "Image",
            "flags": 2,
            "direction": 0,
            "evaluationMode": 2,
            "expression": "",
            "uiOrder": 0
          },
          "fragColor": {
            "name": "fragColor",
            "valueType": "Image",
            "flags": 2,
            "direction": 1,
            "evaluationMode": 1,
            "expression": "",
            "uiOrder": 0
          }
        },
        "nodes": [

        ],
        "connections": [

        ]
      },
      {
        "name": "image",
        "flags": 0,
        "uiPositionX": -409,
        "uiPositionY": 105,
        "opTypeName": "io.artineering.flair.ShaderOp",
        "plugs": {
          "Source Code": {
            "name": "Source Code",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "/* interface\noutputs = [\"fragColor\"]\n\n[[textures]]\nname = \"bufferA\"\n\n[[textures]]\nname = \"bufferB\"\n\n[[textures]]\nname = \"bufferC\"\n\n[[textures]]\nname = \"bufferD\"\n*/\n\nuniform sampler2D bufferA;\nuniform sampler2D bufferB;\nuniform sampler2D bufferC;\nuniform sampler2D bufferD;\n\nout vec4 fragColor;\n\nfloat complexMag(in vec2 c)\n{\n    return sqrt(c.x * c.x + c.y * c.y);\n}\n\nvec2 complexMultiply(in vec2 a, in vec2 b)\n{\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + b.x * a.y);\n}\n\nvoid main()\n{\n\tvec2 uv = gl_FragCoord.xy / u_resolution;\n    \n    vec2 pixelUVSize = vec2(1.0, 1.0) / u_resolution;\n    vec2 step = vec2(0.0, texture(bufferA, pixelUVSize * 0.5).g);\n    \n    vec4 rgba = vec4(0.0);\n    \n    for(int i = -10; i <= 10; ++i)\n    {\n        vec4 samp = texture(bufferB, uv + float(i) * step);\n        vec4 samp2 = texture(bufferC, uv + float(i) * step);\n        vec4 samp3 = texture(bufferD, uv + float(i) * step);\n        vec4 sampKernel = texture(bufferA, pixelUVSize * 0.5 + pixelUVSize * vec2(i+50,0));\n        vec4 sampKernelW = texture(bufferA, pixelUVSize * 0.5 + pixelUVSize * vec2(i+50,1));\n\n        rgba.r += complexMultiply(samp.xy, sampKernel.xy).x;\n        rgba.r += complexMultiply(samp.zw, sampKernel.zw).x;\n\n        rgba.g += complexMultiply(samp2.xy, sampKernel.xy).x;\n        rgba.g += complexMultiply(samp2.zw, sampKernel.zw).x;\n\n        rgba.b += complexMultiply(samp3.xy, sampKernel.xy).x;\n        rgba.b += complexMultiply(samp3.zw, sampKernel.zw).x;\n        \n        rgba.a += sampKernelW.r;\n    }\n    \n    float complexNormalization = 1.0 / rgba.a;\n\n    vec4 outColor = rgba * complexNormalization;   \n    \n    fragColor = outColor;\n}"
          },
          "Source File Name": {
            "name": "Source File Name",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "C:/Users/siim95/Desktop/Flair alpha/DepthOfFieldSiim/DepthofFieldShaders/CircularSeparableConvDoF/image.glsl"
          },
          "Interface Description": {
            "name": "Interface Description",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "\noutputs = [\"fragColor\"]\n\n[[textures]]\nname = \"bufferA\"\n\n[[textures]]\nname = \"bufferB\"\n\n[[textures]]\nname = \"bufferC\"\n\n[[textures]]\nname = \"bufferD\"\n"
          },
          "i:bufferB": {
            "name": "i:bufferB",
            "valueType": "Image",
            "flags": 2,
            "direction": 0,
            "evaluationMode": 2,
            "expression": "",
            "uiOrder": 0
          },
          "i:bufferC": {
            "name": "i:bufferC",
            "valueType": "Image",
            "flags": 2,
            "direction": 0,
            "evaluationMode": 2,
            "expression": "",
            "uiOrder": 0
          },
          "i:bufferD": {
            "name": "i:bufferD",
            "valueType": "Image",
            "flags": 2,
            "direction": 0,
            "evaluationMode": 2,
            "expression": "",
            "uiOrder": 0
          },
          "fragColor": {
            "name": "fragColor",
            "valueType": "Image",
            "flags": 2,
            "direction": 1,
            "evaluationMode": 1,
            "expression": "",
            "uiOrder": 0
          },
          "i:bufferA": {
            "name": "i:bufferA",
            "valueType": "Image",
            "flags": 2,
            "direction": 0,
            "evaluationMode": 2,
            "expression": "",
            "uiOrder": 0
          }
        },
        "nodes": [

        ],
        "connections": [

        ]
      },
      {
        "name": "Display",
        "flags": 0,
        "uiPositionX": -385,
        "uiPositionY": 300,
        "opTypeName": "io.artineering.flair.DisplayOp",
        "plugs": {
          "Input": {
            "name": "Input",
            "valueType": "Image",
            "flags": 2,
            "direction": 0,
            "evaluationMode": 2,
            "expression": "",
            "uiOrder": 0
          },
          "Output": {
            "name": "Output",
            "valueType": "Image",
            "flags": 2,
            "direction": 1,
            "evaluationMode": 1,
            "expression": "",
            "uiOrder": 0
          }
        },
        "nodes": [

        ],
        "connections": [

        ]
      },
      {
        "name": "AOVtarget",
        "flags": 0,
        "uiPositionX": -80,
        "uiPositionY": 200,
        "opTypeName": "io.artineering.flair.Read",
        "plugs": {
          "imageFilePath": {
            "name": "imageFilePath",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "C:/Users/siim95/Desktop/Flair alpha/aovs/Spherebot_Flair/Spherebot_720.shotcam.aovTarget.0063.exr"
          },
          "requestedFormat": {
            "name": "requestedFormat",
            "valueType": "int",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": 0
          },
          "C": {
            "name": "C",
            "valueType": "Image",
            "flags": 2,
            "direction": 1,
            "evaluationMode": 1,
            "expression": "",
            "uiOrder": 0
          }
        },
        "nodes": [

        ],
        "connections": [

        ]
      },
      {
        "name": "BufferAFar",
        "flags": 0,
        "uiPositionX": -360,
        "uiPositionY": -220,
        "opTypeName": "io.artineering.flair.ShaderOp",
        "plugs": {
          "Source Code": {
            "name": "Source Code",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "/* interface \noutputs = [\"fragColor\"]\n\n[[textures]]\nname = \"ColorTarget\"\n\n[[uniforms]]\nname = \"KernelSize\"\ntype = \"int\"\nmin = 1\nmax = 20\n*/\n\nuniform sampler2D ColorTarget;\n\nuniform int KernelSize;\n\nout vec4 fragColor;\n\n#define SAMP_BIAS 50.0\n#define SAMP_DIVIDE 5.0\n\n#define C1_F0 5.268909\n#define C1_EXP_MULT0 -0.886528\n#define C1_REAL0 -0.7406246191\n#define C1_IM0 -0.3704940302\n\n#define C1_F1 1.558213\n#define C1_EXP_MULT1 -1.960518\n#define C1_REAL1 1.5973700402\n#define C1_IM1 -1.4276936105\n\n\nvec4 complexKernel(float x)\n{\n\tvec4 complexWeightsTwo = vec4(\n        (C1_REAL0*cos(x*x*C1_F0) - C1_IM0*sin(x*x*C1_F0))   * exp(C1_EXP_MULT0*x*x),\n\t\t(C1_IM0*cos(x*x*C1_F0)   + C1_REAL0*sin(x*x*C1_F0)) * exp(C1_EXP_MULT0*x*x),\n\t\t(C1_REAL1*cos(x*x*C1_F1) - C1_IM1*sin(x*x*C1_F1))   * exp(C1_EXP_MULT1*x*x),\n\t\t(C1_IM1*cos(x*x*C1_F1)   + C1_REAL1*sin(x*x*C1_F1)) * exp(C1_EXP_MULT1*x*x));\n    \n    return complexWeightsTwo;\n\n}\n\n\nvec2 complexMultiply(vec2 a, vec2 b)\n{\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + b.x * a.y);\n}\n\nvoid main()\n{\n    vec2 uv = gl_FragCoord.xy / u_resolution;\n    \n    vec4 kernel = complexKernel((gl_FragCoord.x - SAMP_BIAS) / SAMP_DIVIDE);\n\tvec4 outColor = texture(ColorTarget, uv);\n    //outColor *= outColor * outColor * outColor * 3.0;\n    \n    vec4 kernelAccum = vec4(0.0);\n    for(int i = -KernelSize; i <= KernelSize; ++i)\n    {\n        kernelAccum += complexKernel(float(i) / SAMP_DIVIDE);\n    }\n    \n    if (int(gl_FragCoord.y) == 0)\n        outColor = kernel;\n    if (int(gl_FragCoord.y) == 1)\n        outColor = vec4(\n            complexMultiply(kernel.xy, kernelAccum.xy).x + \n            complexMultiply(kernel.zw, kernelAccum.zw).x, 0.0, 0.0, 0.0);    \n    if (int(gl_FragCoord.y) == 0 && int(gl_FragCoord.x) == 0)\n        outColor = vec4(1.0 / u_resolution, 0.0, 0.0);\n    \n    fragColor = outColor;\n}"
          },
          "Source File Name": {
            "name": "Source File Name",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "C:/Users/siim95/Desktop/Flair alpha/DepthOfFieldSiim/DepthofFieldShaders/CircularSeparableConvolutionDoF/bufferAFar.glsl"
          },
          "Interface Description": {
            "name": "Interface Description",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": " \noutputs = [\"fragColor\"]\n\n[[textures]]\nname = \"ColorTarget\"\n\n[[uniforms]]\nname = \"KernelSize\"\ntype = \"int\"\nmin = 1\nmax = 20\n"
          },
          "i:KernelSize": {
            "name": "i:KernelSize",
            "valueType": "int",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": 5
          },
          "i:ColorTarget": {
            "name": "i:ColorTarget",
            "valueType": "Image",
            "flags": 2,
            "direction": 0,
            "evaluationMode": 2,
            "expression": "",
            "uiOrder": 0
          },
          "fragColor": {
            "name": "fragColor",
            "valueType": "Image",
            "flags": 2,
            "direction": 1,
            "evaluationMode": 1,
            "expression": "",
            "uiOrder": 0
          }
        },
        "nodes": [

        ],
        "connections": [

        ]
      },
      {
        "name": "Composite",
        "flags": 0,
        "uiPositionX": -525,
        "uiPositionY": 220,
        "opTypeName": "io.artineering.flair.ShaderOp",
        "plugs": {
          "Source Code": {
            "name": "Source Code",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "/* interface\n\noutputs = [\"finalResult\"]\n\n[[textures]]\nname = \"blurredTexture\"\n\n[[textures]]\nname = \"ColorTarget\"\n\n[[textures]]\nname = \"AOVTarget\"\n\n[[uniforms]]\nname = \"blend\"\ntype = \"float\"\nmin = 0.0\nmax = 1.0\n\n[[uniforms]]\nname = \"FocusDistance\"\ntype = \"float\"\nmin = 0.0\nmax = 1.0\n*/\n\nuniform sampler2D blurredTexture;\nuniform sampler2D ColorTarget;\nuniform sampler2D AOVTarget;\n\nuniform float FocusDistance;\n\nuniform float blend;\n\nout vec4 finalResult;\n\nvoid main(){\n    vec4 color = vec4(0.0);\n\n    vec4 colorTarget = texture(ColorTarget, f_texcoord);\n    vec4 blur = texture(blurredTexture, f_texcoord);\n    //pixelDepth  \n    float pDepth = texture(AOVTarget, f_texcoord).r;\n    float pRemapedDepth = remap(pDepth, 25.0, 100.0, 0.0, 1.0);\n\n    if (pRemapedDepth > FocusDistance) {\n        color = lerp(colorTarget, blur, blend);\n    } else {\n        color = colorTarget;\n    }\n\n    finalResult = color;\n}"
          },
          "Source File Name": {
            "name": "Source File Name",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "C:/Users/siim95/Desktop/Flair alpha/DepthOfFieldSiim/DepthofFieldShaders/CircularSeparableConvolutionDoF/composite.glsl"
          },
          "Interface Description": {
            "name": "Interface Description",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "\n\noutputs = [\"finalResult\"]\n\n[[textures]]\nname = \"blurredTexture\"\n\n[[textures]]\nname = \"ColorTarget\"\n\n[[textures]]\nname = \"AOVTarget\"\n\n[[uniforms]]\nname = \"blend\"\ntype = \"float\"\nmin = 0.0\nmax = 1.0\n\n[[uniforms]]\nname = \"FocusDistance\"\ntype = \"float\"\nmin = 0.0\nmax = 1.0\n"
          },
          "i:ColorTarget": {
            "name": "i:ColorTarget",
            "valueType": "Image",
            "flags": 2,
            "direction": 0,
            "evaluationMode": 2,
            "expression": "",
            "uiOrder": 0
          },
          "finalResult": {
            "name": "finalResult",
            "valueType": "Image",
            "flags": 2,
            "direction": 1,
            "evaluationMode": 1,
            "expression": "",
            "uiOrder": 0
          },
          "i:blend": {
            "name": "i:blend",
            "valueType": "float",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": 0.7320000
          },
          "i:blurredTexture": {
            "name": "i:blurredTexture",
            "valueType": "Image",
            "flags": 2,
            "direction": 0,
            "evaluationMode": 2,
            "expression": "",
            "uiOrder": 0
          },
          "i:AOVTarget": {
            "name": "i:AOVTarget",
            "valueType": "Image",
            "flags": 2,
            "direction": 0,
            "evaluationMode": 2,
            "expression": "",
            "uiOrder": 0
          },
          "i:FocusDistance": {
            "name": "i:FocusDistance",
            "valueType": "float",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": 0.2740000
          }
        },
        "nodes": [

        ],
        "connections": [

        ]
      },
      {
        "name": "ColorTarget_0",
        "flags": 0,
        "uiPositionX": -270,
        "uiPositionY": 165,
        "opTypeName": "io.artineering.flair.Read",
        "plugs": {
          "imageFilePath": {
            "name": "imageFilePath",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "C:/Users/siim95/Desktop/Flair alpha/aovs/Spherebot_Flair/Spherebot_720.shotcam.colorTarget.0063.exr"
          },
          "requestedFormat": {
            "name": "requestedFormat",
            "valueType": "int",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": 0
          },
          "C": {
            "name": "C",
            "valueType": "Image",
            "flags": 2,
            "direction": 1,
            "evaluationMode": 1,
            "expression": "",
            "uiOrder": 0
          }
        },
        "nodes": [

        ],
        "connections": [

        ]
      }
    ],
    "connections": [
      "BufferAFar/fragColor",
      "bufferB/i:Target",
      "BufferAFar/fragColor",
      "bufferC/i:Target",
      "BufferAFar/fragColor",
      "bufferD/i:Target",
      "bufferB/fragColor",
      "image/i:bufferB",
      "bufferC/fragColor",
      "image/i:bufferC",
      "bufferD/fragColor",
      "image/i:bufferD",
      "BufferAFar/fragColor",
      "image/i:bufferA",
      "Composite/finalResult",
      "Display/Input",
      "ColorTarget/C",
      "BufferAFar/i:ColorTarget",
      "ColorTarget_0/C",
      "Composite/i:ColorTarget",
      "image/fragColor",
      "Composite/i:blurredTexture",
      "AOVtarget/C",
      "Composite/i:AOVTarget"
    ]
  }
}
