{
  "root": {
    "name": "",
    "flags": 0,
    "uiPositionX": 0,
    "uiPositionY": 0,
    "plugs": {

    },
    "nodes": [
      {
        "name": "_settings",
        "flags": 1,
        "uiPositionX": 0,
        "uiPositionY": 0,
        "plugs": {
          "projectDirectory": {
            "name": "projectDirectory",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": ""
          },
          "worldScale_": {
            "name": "worldScale_",
            "valueType": "float",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": 1.000000
          },
          "useCustomResolution": {
            "name": "useCustomResolution",
            "valueType": "bool",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": false
          },
          "imageWidth": {
            "name": "imageWidth",
            "valueType": "int",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": 1920
          },
          "imageHeight": {
            "name": "imageHeight",
            "valueType": "int",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": 1080
          },
          "startFrame": {
            "name": "startFrame",
            "valueType": "int",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": 0
          },
          "endFrame": {
            "name": "endFrame",
            "valueType": "int",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": 0
          },
          "byFrame": {
            "name": "byFrame",
            "valueType": "int",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": 0
          },
          "numOfPadding": {
            "name": "numOfPadding",
            "valueType": "int",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": 0
          },
          "renumberFrames": {
            "name": "renumberFrames",
            "valueType": "bool",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": false
          },
          "newFrameNumber": {
            "name": "newFrameNumber",
            "valueType": "int",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": 0
          }
        },
        "nodes": [

        ],
        "connections": [

        ]
      },
      {
        "name": "AOVTarget",
        "flags": 0,
        "uiPositionX": -155,
        "uiPositionY": -270,
        "opTypeName": "io.artineering.flair.Read",
        "plugs": {
          "imageFilePath": {
            "name": "imageFilePath",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "C:/Users/siim95/Desktop/Flair alpha/aovs/Spherebot_Flair/Spherebot_720.shotcam.aovTarget.0063.exr"
          },
          "requestedFormat": {
            "name": "requestedFormat",
            "valueType": "int",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": 0
          },
          "C": {
            "name": "C",
            "valueType": "Image",
            "flags": 2,
            "direction": 1,
            "evaluationMode": 1,
            "expression": "",
            "uiOrder": 0
          }
        },
        "nodes": [

        ],
        "connections": [

        ]
      },
      {
        "name": "_globals",
        "flags": 1,
        "uiPositionX": 0,
        "uiPositionY": 0,
        "plugs": {

        },
        "nodes": [

        ],
        "connections": [

        ]
      },
      {
        "name": "ColorTarget",
        "flags": 0,
        "uiPositionX": 90,
        "uiPositionY": -205,
        "opTypeName": "io.artineering.flair.Read",
        "plugs": {
          "imageFilePath": {
            "name": "imageFilePath",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "C:/Users/siim95/Desktop/Flair alpha/aovs/Spherebot_Flair/Spherebot_720.shotcam.colorTarget.0063.exr"
          },
          "requestedFormat": {
            "name": "requestedFormat",
            "valueType": "int",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": 0
          },
          "C": {
            "name": "C",
            "valueType": "Image",
            "flags": 2,
            "direction": 1,
            "evaluationMode": 1,
            "expression": "",
            "uiOrder": 0
          }
        },
        "nodes": [

        ],
        "connections": [

        ]
      },
      {
        "name": "CoCMap",
        "flags": 0,
        "uiPositionX": -310,
        "uiPositionY": -165,
        "opTypeName": "io.artineering.flair.ShaderOp",
        "plugs": {
          "Source Code": {
            "name": "Source Code",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "/* interface \noutputs = [\"CoCMap\"]\n\n[[textures]]\nname = \"AOVTarget\"\n\n[[uniforms]]\nname = \"Scale\"\ntype = \"float\"\nmin = 0.1\nmax = 5.0\n\n[[uniforms]]\nname = \"FocalLength\"\ntype = \"float\"\nmin = 0.01\nmax = 1.0\n*/\n\nuniform sampler2D AOVTarget;\n\nuniform float Scale;\nuniform float FocalLength;\n\nout vec4 CoCMap;\n\nvoid main() {\n    float pixelDepth = texture(AOVTarget, f_texcoord).r;\n    float remaped = remap(pixelDepth, 0.0, 100.0, 0.0, 1.0);\n    //float remaped = 1.0 / pixelDepth;\n    float CoC = abs(1.0 - FocalLength / remaped);\n    float ScaledCoC = Scale * CoC;\n    \n\n    CoCMap = vec4(ScaledCoC);\n}"
          },
          "Source File Name": {
            "name": "Source File Name",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "C:/Users/siim95/Desktop/Flair alpha/DepthOfFieldSiim/DepthofFieldShaders/AdaptiveRecursiveDoF/CoCMap.glsl"
          },
          "Interface Description": {
            "name": "Interface Description",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": " \noutputs = [\"CoCMap\"]\n\n[[textures]]\nname = \"AOVTarget\"\n\n[[uniforms]]\nname = \"Scale\"\ntype = \"float\"\nmin = 0.1\nmax = 5.0\n\n[[uniforms]]\nname = \"FocalLength\"\ntype = \"float\"\nmin = 0.01\nmax = 1.0\n"
          },
          "i:Scale": {
            "name": "i:Scale",
            "valueType": "float",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": 5.000000
          },
          "i:FocalLength": {
            "name": "i:FocalLength",
            "valueType": "float",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": 0.6610000
          },
          "i:AOVTarget": {
            "name": "i:AOVTarget",
            "valueType": "Image",
            "flags": 2,
            "direction": 0,
            "evaluationMode": 2,
            "expression": "",
            "uiOrder": 0
          },
          "CoCMap": {
            "name": "CoCMap",
            "valueType": "Image",
            "flags": 2,
            "direction": 1,
            "evaluationMode": 1,
            "expression": "",
            "uiOrder": 0
          }
        },
        "nodes": [

        ],
        "connections": [

        ]
      },
      {
        "name": "WeightMap",
        "flags": 0,
        "uiPositionX": -230,
        "uiPositionY": -45,
        "opTypeName": "io.artineering.flair.ShaderOp",
        "plugs": {
          "Source Code": {
            "name": "Source Code",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "/* interface\noutputs = [\"WeightMap\"]\n\n[[textures]]\nname = \"CoCMap\"\n\n[[textures]]\nname = \"BlurredDepthMap\"\n\n[[uniforms]]\nname = \"Cmin\"\ntype = \"float\"\nmin = 0.1\nmax = 0.8\n\n[[uniforms]]\nname = \"FocalLength\"\ntype = \"float\"\nmin = 0.01\nmax = 1.0\n*/\n\nuniform sampler2D CoCMap;\nuniform sampler2D BlurredDepthMap;\n\nuniform float Cmin;\n//uniform float Scale;\nuniform float FocalLength;\n#define Scale 1.0\n\nout vec4 WeightMap;\n\nfloat ForeGroundOutOfFocusRegion(){\n    return Scale * FocalLength / (Scale + Cmin);\n}\n\nfloat BackGroundOutOfFocusRegion(){\n    return Scale * FocalLength / (Scale - Cmin);\n}\n\nfloat case1(float pixelValue, float neighbour) {\n\n    float SIGMA_THRESHOLD = 0.00001;\n    if((pixelValue + neighbour) * 0.5 > SIGMA_THRESHOLD) {\n\n        return exp(-(1.0 / ((pixelValue + neighbour) * 0.5)));\n    } else {\n\n        float zero = 0.0;\n        return zero;\n    }\n}\n\nfloat case2(float pixel, float neighbour) {\n    float SIGMA_THRESHOLD = 0.00001;\n    if (max(pixel, neighbour) > SIGMA_THRESHOLD) {\n        return exp(-(1.0 / max(pixel, neighbour)));\n    } else {\n        return 0.0;\n    }\n}\n\nfloat case3(float pixelValue, float neighbour) {\n    float SIGMA_THRESHOLD = 0.00001;\n    if (min(pixelValue, neighbour) > SIGMA_THRESHOLD) {\n        return exp(-(1.0 / min(pixelValue, neighbour)));\n    } else {\n        return 0.0;\n    }\n}\n\nfloat case4(float pixel, float neighbour) {\n    return case2(pixel, neighbour);\n}\n\nvoid main() {\n    float D1 = ForeGroundOutOfFocusRegion();\n    float D2 = BackGroundOutOfFocusRegion();\n\n    float alpha = 0.0;\n\n    float pixelValue = texelFetch(CoCMap, ivec2(gl_FragCoord.xy), 0).r;\n    float neighbour = texelFetch(CoCMap, ivec2(gl_FragCoord.x + 0.5, gl_FragCoord.y), 0).r;\n    float pinholePixelValue = texelFetch(BlurredDepthMap, ivec2(u_resolution.x - gl_FragCoord.x, u_resolution.y - gl_FragCoord.y), 0).r;\n    float pinholeNeighbour = texelFetch(BlurredDepthMap, ivec2(u_resolution.x - (gl_FragCoord.x + 1.0), u_resolution.y - (gl_FragCoord.y)), 0).r;\n    /*\n    \n[[uniforms]]\nname = \"Scale\"\ntype = \"float\"\nmin = 0.1\nmax = 2.0\n*/\n\n    // Weights are computed based on cases\n    // 1. p, q ∈ IR or FOR or BOR\n    // 2. p ∈ IR, q ∈ FOR or p ∈ FOR, q ∈ IR\n    // 3. p ∈ IR, q ∈ BOR or p ∈ BOR, q ∈ IR\n    // 4. p ∈ FOR, q ∈ BOR or p ∈ BOR, q ∈ FOR\n    // IR - In focus region, FOR - Foreground out of focus region, BOR - background out of focus region\n\n    // case 1\n    if (D1 >= pixelValue && D1 >= neighbour) {\n        alpha = case1(pixelValue, neighbour);\n    }\n    if (D2 > pixelValue && D2 > neighbour) {\n        alpha = case1(pixelValue, neighbour);\n    }\n    if(pixelValue > D1 && pixelValue < D2 && neighbour > D1 && neighbour < D2) {\n        alpha = case1(pixelValue, neighbour);\n    }\n    // case2\n    if ((pixelValue > D1 && pixelValue < D2 && neighbour < D1) || (pixelValue < D1 && neighbour > D1 && neighbour < D2)) {\n        alpha = case2(pinholePixelValue, pinholeNeighbour);\n    }\n    // case3\n    if ((pixelValue > D1 && pixelValue < D2 && neighbour > D2) || (neighbour > D1 && neighbour < D2 && pixelValue > D2)) {\n        alpha = case3(pixelValue, neighbour);\n    }\n    // case4\n    if ((pixelValue < D1 && neighbour > D2) || (neighbour < D1 && pixelValue > D2)) {\n        alpha = case4(pinholePixelValue, pinholeNeighbour);\n    }\n    \n    WeightMap = vec4(alpha);\n}"
          },
          "Source File Name": {
            "name": "Source File Name",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "C:/Users/siim95/Desktop/Flair alpha/DepthOfFieldSiim/DepthofFieldShaders/AdaptiveRecursiveDoF/WeightMap.glsl"
          },
          "Interface Description": {
            "name": "Interface Description",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "\noutputs = [\"WeightMap\"]\n\n[[textures]]\nname = \"CoCMap\"\n\n[[textures]]\nname = \"BlurredDepthMap\"\n\n[[uniforms]]\nname = \"Cmin\"\ntype = \"float\"\nmin = 0.1\nmax = 0.8\n\n[[uniforms]]\nname = \"FocalLength\"\ntype = \"float\"\nmin = 0.01\nmax = 1.0\n"
          },
          "i:Cmin": {
            "name": "i:Cmin",
            "valueType": "float",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": 0.8000000
          },
          "i:FocalLength": {
            "name": "i:FocalLength",
            "valueType": "float",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": 0.5760000
          },
          "WeightMap": {
            "name": "WeightMap",
            "valueType": "Image",
            "flags": 2,
            "direction": 1,
            "evaluationMode": 1,
            "expression": "",
            "uiOrder": 0
          },
          "i:CoCMap": {
            "name": "i:CoCMap",
            "valueType": "Image",
            "flags": 2,
            "direction": 0,
            "evaluationMode": 2,
            "expression": "",
            "uiOrder": 0
          },
          "i:BlurredDepthMap": {
            "name": "i:BlurredDepthMap",
            "valueType": "Image",
            "flags": 2,
            "direction": 0,
            "evaluationMode": 2,
            "expression": "",
            "uiOrder": 0
          }
        },
        "nodes": [

        ],
        "connections": [

        ]
      },
      {
        "name": "RecursiveFilter1",
        "flags": 0,
        "uiPositionX": -80,
        "uiPositionY": 30,
        "opTypeName": "io.artineering.flair.ShaderOp",
        "plugs": {
          "Source Code": {
            "name": "Source Code",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "/* interface\noutputs = [\"Output\"]\n\n[[textures]]\nname = \"ColorTarget\"\n\n[[textures]]\nname = \"WeightMap\"\n\n*/\n\nuniform sampler2D ColorTarget;\nuniform sampler2D WeightMap;\n\nout vec4 Output;\n\nvoid main() {\n    float redChannel = 0.0;\n    float greenChannel = 0.0;\n    float blueChannel = 0.0;\n\n    //float alpha = texelFetch(WeightMap, ivec2(gl_FragCoord.xy), 0).r;\n    float alpha = texture(WeightMap, f_texcoord).r;\n\n    vec4 color = texelFetch(ColorTarget, ivec2(gl_FragCoord.xy), 0);\n    vec4 leftColor = texelFetch(ColorTarget, ivec2(gl_FragCoord.x - 1.0, gl_FragCoord.y), 0);\n\n    redChannel = (1.0 - alpha) * color.r + alpha * leftColor.r;\n    greenChannel = (1.0 - alpha) * color.g + alpha * leftColor.g;\n    blueChannel = (1.0 - alpha) * color.b + alpha * leftColor.b;\n\n    Output = vec4(redChannel, greenChannel, blueChannel, 1.0);\n}"
          },
          "Source File Name": {
            "name": "Source File Name",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "C:/Users/siim95/Desktop/Flair alpha/DepthOfFieldSiim/DepthofFieldShaders/AdaptiveRecursiveDoF/RecursiveFilter.glsl"
          },
          "Interface Description": {
            "name": "Interface Description",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "\noutputs = [\"Output\"]\n\n[[textures]]\nname = \"ColorTarget\"\n\n[[textures]]\nname = \"WeightMap\"\n\n"
          },
          "Output": {
            "name": "Output",
            "valueType": "Image",
            "flags": 2,
            "direction": 1,
            "evaluationMode": 1,
            "expression": "",
            "uiOrder": 0
          },
          "i:ColorTarget": {
            "name": "i:ColorTarget",
            "valueType": "Image",
            "flags": 2,
            "direction": 0,
            "evaluationMode": 2,
            "expression": "",
            "uiOrder": 0
          },
          "i:WeightMap": {
            "name": "i:WeightMap",
            "valueType": "Image",
            "flags": 2,
            "direction": 0,
            "evaluationMode": 2,
            "expression": "",
            "uiOrder": 0
          }
        },
        "nodes": [

        ],
        "connections": [

        ]
      },
      {
        "name": "RecursiveFilter2",
        "flags": 0,
        "uiPositionX": -70,
        "uiPositionY": 120,
        "opTypeName": "io.artineering.flair.ShaderOp",
        "plugs": {
          "Source Code": {
            "name": "Source Code",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "/* interface\noutputs = [\"Output\"]\n\n[[textures]]\nname = \"ColorTarget\"\n\n[[textures]]\nname = \"WeightMap\"\n\n*/\n\nuniform sampler2D ColorTarget;\nuniform sampler2D WeightMap;\n\nout vec4 Output;\n\nvoid main() {\n    float redChannel = 0.0;\n    float greenChannel = 0.0;\n    float blueChannel = 0.0;\n\n    //float alpha = texelFetch(WeightMap, ivec2(gl_FragCoord.xy), 0).r;\n    float alpha = texture(WeightMap, f_texcoord).r;\n\n    vec4 color = texelFetch(ColorTarget, ivec2(gl_FragCoord.xy), 0);\n    vec4 leftColor = texelFetch(ColorTarget, ivec2(gl_FragCoord.x - 1.0, gl_FragCoord.y), 0);\n\n    redChannel = (1.0 - alpha) * color.r + alpha * leftColor.r;\n    greenChannel = (1.0 - alpha) * color.g + alpha * leftColor.g;\n    blueChannel = (1.0 - alpha) * color.b + alpha * leftColor.b;\n\n    Output = vec4(redChannel, greenChannel, blueChannel, 1.0);\n}"
          },
          "Source File Name": {
            "name": "Source File Name",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "C:/Users/siim95/Desktop/Flair alpha/DepthOfFieldSiim/DepthofFieldShaders/AdaptiveRecursiveDoF/RecursiveFilter.glsl"
          },
          "Interface Description": {
            "name": "Interface Description",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "\noutputs = [\"Output\"]\n\n[[textures]]\nname = \"ColorTarget\"\n\n[[textures]]\nname = \"WeightMap\"\n\n"
          },
          "Output": {
            "name": "Output",
            "valueType": "Image",
            "flags": 2,
            "direction": 1,
            "evaluationMode": 1,
            "expression": "",
            "uiOrder": 0
          },
          "i:ColorTarget": {
            "name": "i:ColorTarget",
            "valueType": "Image",
            "flags": 2,
            "direction": 0,
            "evaluationMode": 2,
            "expression": "",
            "uiOrder": 0
          },
          "i:WeightMap": {
            "name": "i:WeightMap",
            "valueType": "Image",
            "flags": 2,
            "direction": 0,
            "evaluationMode": 2,
            "expression": "",
            "uiOrder": 0
          }
        },
        "nodes": [

        ],
        "connections": [

        ]
      },
      {
        "name": "RecursiveFilter3",
        "flags": 0,
        "uiPositionX": -70,
        "uiPositionY": 230,
        "opTypeName": "io.artineering.flair.ShaderOp",
        "plugs": {
          "Source Code": {
            "name": "Source Code",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "/* interface\noutputs = [\"Output\"]\n\n[[textures]]\nname = \"ColorTarget\"\n\n[[textures]]\nname = \"WeightMap\"\n\n*/\n\nuniform sampler2D ColorTarget;\nuniform sampler2D WeightMap;\n\nout vec4 Output;\n\nvoid main() {\n    float redChannel = 0.0;\n    float greenChannel = 0.0;\n    float blueChannel = 0.0;\n\n    float alpha = texelFetch(WeightMap, ivec2(gl_FragCoord.xy), 0).r;\n\n    vec4 color = texelFetch(ColorTarget, ivec2(gl_FragCoord.xy), 0);\n    vec4 leftColor = texelFetch(ColorTarget, ivec2(gl_FragCoord.x - 1.0, gl_FragCoord.y), 0);\n\n    redChannel = (1.0 - alpha) * color.r + alpha * leftColor.r;\n    greenChannel = (1.0 - alpha) * color.g + alpha * leftColor.g;\n    blueChannel = (1.0 - alpha) * color.b + alpha * leftColor.b;\n\n    Output = vec4(redChannel, greenChannel, blueChannel, 1.0);\n}"
          },
          "Source File Name": {
            "name": "Source File Name",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "C:/Users/siim95/Desktop/Flair alpha/DepthOfFieldSiim/DepthofFieldShaders/AdaptiveRecursiveDoF/RecursiveFilter.glsl"
          },
          "Interface Description": {
            "name": "Interface Description",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "\noutputs = [\"Output\"]\n\n[[textures]]\nname = \"ColorTarget\"\n\n[[textures]]\nname = \"WeightMap\"\n\n"
          },
          "Output": {
            "name": "Output",
            "valueType": "Image",
            "flags": 2,
            "direction": 1,
            "evaluationMode": 1,
            "expression": "",
            "uiOrder": 0
          },
          "i:ColorTarget": {
            "name": "i:ColorTarget",
            "valueType": "Image",
            "flags": 2,
            "direction": 0,
            "evaluationMode": 2,
            "expression": "",
            "uiOrder": 0
          },
          "i:WeightMap": {
            "name": "i:WeightMap",
            "valueType": "Image",
            "flags": 2,
            "direction": 0,
            "evaluationMode": 2,
            "expression": "",
            "uiOrder": 0
          }
        },
        "nodes": [

        ],
        "connections": [

        ]
      },
      {
        "name": "Display",
        "flags": 0,
        "uiPositionX": -255,
        "uiPositionY": 280,
        "opTypeName": "io.artineering.flair.DisplayOp",
        "plugs": {
          "Input": {
            "name": "Input",
            "valueType": "Image",
            "flags": 2,
            "direction": 0,
            "evaluationMode": 2,
            "expression": "",
            "uiOrder": 0
          },
          "Output": {
            "name": "Output",
            "valueType": "Image",
            "flags": 2,
            "direction": 1,
            "evaluationMode": 1,
            "expression": "",
            "uiOrder": 0
          }
        },
        "nodes": [

        ],
        "connections": [

        ]
      },
      {
        "name": "BlurredDepthMap",
        "flags": 0,
        "uiPositionX": -70,
        "uiPositionY": -155,
        "opTypeName": "io.artineering.flair.ShaderOp",
        "plugs": {
          "Source Code": {
            "name": "Source Code",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "/* interface\noutputs = [\"Output\"]\n\n[[textures]]\nname = \"AOVTarget\"\n\n[[uniforms]]\nname = \"Radius\"\ntype = \"int\"\nmin = 1\nmax = 15\n*/\n\nuniform sampler2D AOVTarget;\n\nuniform int Radius;\n\nout vec4 Output;\n\n\nvec4 gaussian(int radius, float sigma) {\n    vec4 sum = vec4(0.0);\n    if (radius > 0) {\n        float norm = 0.0;\n        float twoSigma2 = 2.0 * sigma * sigma;\n        for (int x = -radius; x <= radius; x++) {\n            for (int y = -radius; y <= radius; y++) {\n                // proper formula\n                // float kernelWeight = 1/(sqrt(2*PI)*sigma) * exp(-(x * x) / (2 * sigma * sigma));  // proper formula\n                // float kernelWeight = 0.15915 / (sigma * sigma) * exp(-(x*x + y+y) / (2 * sigma * sigma));\n\n                // sacrifice some accuracy by removing the factor\n                float d = length(vec2(x, y));\n                float kernelWeight = exp(-(d * d) / twoSigma2);\n\n                vec4 c = texture(AOVTarget, f_texcoord + (vec2(x, y) * u_texel));\n                norm += kernelWeight;\n                sum += kernelWeight * c;\n            }\n        }\n        sum /= norm;\n    } else {\n        sum = texture(AOVTarget, f_texcoord);\n    }\n    return sum;\n}\n\n\nvoid main() {\n    float sigma = Radius/2.0;\n\n    Output = gaussian(Radius, sigma);\n}"
          },
          "Source File Name": {
            "name": "Source File Name",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "C:/Users/siim95/Desktop/Flair alpha/DepthOfFieldSiim/DepthofFieldShaders/AdaptiveRecursiveDoF/gaussianBlur.glsl"
          },
          "Interface Description": {
            "name": "Interface Description",
            "valueType": "string",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": "\noutputs = [\"Output\"]\n\n[[textures]]\nname = \"AOVTarget\"\n\n[[uniforms]]\nname = \"Radius\"\ntype = \"int\"\nmin = 1\nmax = 15\n"
          },
          "Output": {
            "name": "Output",
            "valueType": "Image",
            "flags": 2,
            "direction": 1,
            "evaluationMode": 1,
            "expression": "",
            "uiOrder": 0
          },
          "i:Radius": {
            "name": "i:Radius",
            "valueType": "int",
            "flags": 0,
            "direction": 0,
            "evaluationMode": 0,
            "expression": "",
            "uiOrder": 0,
            "constantValue": 6
          },
          "i:AOVTarget": {
            "name": "i:AOVTarget",
            "valueType": "Image",
            "flags": 2,
            "direction": 0,
            "evaluationMode": 2,
            "expression": "",
            "uiOrder": 0
          }
        },
        "nodes": [

        ],
        "connections": [

        ]
      }
    ],
    "connections": [
      "AOVTarget/C",
      "CoCMap/i:AOVTarget",
      "CoCMap/CoCMap",
      "WeightMap/i:CoCMap",
      "BlurredDepthMap/Output",
      "WeightMap/i:BlurredDepthMap",
      "ColorTarget/C",
      "RecursiveFilter1/i:ColorTarget",
      "WeightMap/WeightMap",
      "RecursiveFilter1/i:WeightMap",
      "RecursiveFilter1/Output",
      "RecursiveFilter2/i:ColorTarget",
      "WeightMap/WeightMap",
      "RecursiveFilter2/i:WeightMap",
      "RecursiveFilter2/Output",
      "RecursiveFilter3/i:ColorTarget",
      "WeightMap/WeightMap",
      "RecursiveFilter3/i:WeightMap",
      "RecursiveFilter3/Output",
      "Display/Input",
      "AOVTarget/C",
      "BlurredDepthMap/i:AOVTarget"
    ]
  }
}
